==10295== Memcheck, a memory error detector
==10295== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==10295== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==10295== Command: app/shell-app
==10295== Parent PID: 9419
==10295== 
==10295== Conditional jump or move depends on uninitialised value(s)
==10295==    at 0x109D68: main (main.cpp:9)
==10295== 
==10295== 
==10295== FILE DESCRIPTORS: 4 open at exit.
==10295== Open file descriptor 3: /home/dsahu/UMD/ENPM808X/assignments/valgrind_playground/build/valgrind_output_initial.txt
==10295==    <inherited from parent>
==10295== 
==10295== Open file descriptor 2: /dev/pts/1
==10295==    <inherited from parent>
==10295== 
==10295== Open file descriptor 1: /dev/pts/1
==10295==    <inherited from parent>
==10295== 
==10295== Open file descriptor 0: /dev/pts/1
==10295==    <inherited from parent>
==10295== 
==10295== 
==10295== HEAP SUMMARY:
==10295==     in use at exit: 44 bytes in 2 blocks
==10295==   total heap usage: 4 allocs, 2 frees, 73,772 bytes allocated
==10295== 
==10295== 20 bytes in 1 blocks are indirectly lost in loss record 1 of 2
==10295==    at 0x4C3017F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==10295==    by 0x10A611: __gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*) (new_allocator.h:111)
==10295==    by 0x10A57E: std::allocator_traits<std::allocator<int> >::allocate(std::allocator<int>&, unsigned long) (alloc_traits.h:436)
==10295==    by 0x10A4DF: std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long) (stl_vector.h:172)
==10295==    by 0x10A3D4: std::_Vector_base<int, std::allocator<int> >::_M_create_storage(unsigned long) (stl_vector.h:187)
==10295==    by 0x10A220: std::_Vector_base<int, std::allocator<int> >::_Vector_base(unsigned long, std::allocator<int> const&) (stl_vector.h:138)
==10295==    by 0x10A05B: std::vector<int, std::allocator<int> >::vector(unsigned long, int const&, std::allocator<int> const&) (stl_vector.h:297)
==10295==    by 0x109EBE: AnalogSensor::Read() (AnalogSensor.cpp:16)
==10295==    by 0x109D44: main (main.cpp:7)
==10295== 
==10295== 44 (24 direct, 20 indirect) bytes in 1 blocks are definitely lost in loss record 2 of 2
==10295==    at 0x4C3017F: operator new(unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==10295==    by 0x109EA2: AnalogSensor::Read() (AnalogSensor.cpp:16)
==10295==    by 0x109D44: main (main.cpp:7)
==10295== 
==10295== LEAK SUMMARY:
==10295==    definitely lost: 24 bytes in 1 blocks
==10295==    indirectly lost: 20 bytes in 1 blocks
==10295==      possibly lost: 0 bytes in 0 blocks
==10295==    still reachable: 0 bytes in 0 blocks
==10295==         suppressed: 0 bytes in 0 blocks
==10295== 
==10295== For counts of detected and suppressed errors, rerun with: -v
==10295== Use --track-origins=yes to see where uninitialised values come from
==10295== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
